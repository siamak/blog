@mixin ruler-patch($state) {
	@if $state == true {
		background-image: linear-gradient(to bottom, rgba(#0d09b1, 0.1) 1px, transparent 1px);
		background-position: right 0;
		background-repeat: repeat;
		background-size: $line-height * 1rem $line-height * 1rem;
		&:active {
			background-image: inherit;
		}
	}
}

@mixin aspect-ratio($ratio /*$width/$ratio, $height*/){
	$padding: 1 / $ratio * 100%;
	padding-bottom: $padding;
}

@mixin blur ($radius) {
	-webkit-filter: blur($radius+px); /* Chrome, Safari */
	-ms-filter: blur($radius+px); /* IE12? */
	filter: url("data:image/svg+xml;utf8,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"blur\"><feGaussianBlur stdDeviation=\"#{$radius}\" /></filter></svg>#blur"); /* Firefox, Safari, Chrome*/
	filter: progid:DXImageTransform.Microsoft.Blur(Strength=$radius); /* IE9 */
}

// Font-size
@mixin font-size($number) {
	font-size: #{ $number * $base + 'px'};
	font-size: #{ $number + 'rem'};
}

// Margin-top
@mixin margin-top($number) {
	margin-top: #{ $number * $leading + 'px'};
	margin-top: #{ $number * $leading-rem + 'rem'};
}

// Margin-bottom
@mixin margin-bottom($number) {
	margin-bottom: #{ $number * $leading + 'px'};
	margin-bottom: #{ $number * $leading-rem + 'rem'};
}

// Letter-spacing
%letter-spacing {
	letter-spacing: -1 / 40.745 * 1rem;
}

// Margin
@mixin margin($top, $right, $bottom: null, $left: null) {
	@if $left == null and $bottom == null {
		margin: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'};
		margin: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'};
	} @else if $left == null or $left == $right {
		margin: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'};
		margin: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'};
	} @else {
		margin: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'} #{ $left * $leading + 'px'};
		margin: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'} #{ $left * $leading-rem + 'rem'};
	}
}

// Padding
@mixin padding($top, $right, $bottom: null, $left: null) {
	@if $left == null and $bottom == null {
		padding: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'};
		padding: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'};
	} @else if $left == null or $left == $right {
		padding: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'};
		padding: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'};
	} @else {
		padding: #{ $top * $leading + 'px'} #{ $right * $leading + 'px'} #{ $bottom * $leading + 'px'} #{ $left * $leading + 'px'};
		padding: #{ $top * $leading-rem + 'rem'} #{ $right * $leading-rem + 'rem'} #{ $bottom * $leading-rem + 'rem'} #{ $left * $leading-rem + 'rem'};
	}
}

@mixin padding-equal($number) {
	padding: #{ $number * $leading + 'px'};
	padding: #{ $number * $leading-rem + 'rem'};
}

// Line-height
@mixin line-height($number) {
	line-height: #{ $number * $leading + 'px'};
	line-height: #{ $number * $leading-rem + 'rem'};
}

// Font-Face
@mixin font-face($name, $path, $weight: null, $exts: eot woff2 woff ttf svg) {
	$src: null;
	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-weight: $weight;
		src: $src;
	}
}
